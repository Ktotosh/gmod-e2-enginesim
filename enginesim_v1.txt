@name EngineSIM V1
@inputs StarterActive Ignition Throttle Wh1:entity Wh2:entity Clutch GearUp GearDown Brake
@outputs RPM1 Torque1 FuelRem GearOut BRLight BCLight
@persist RPM Torque AngVel RevLimit Gear Ratio Broken
@persist Wh1AngVel Wh2AngVel TotalLoadRatio J_Output Wdiff 
@persist TurboBoost TurboRPM MaxBoost BoostPress ManifoldPress
@strict
@model models/gibs/airboat_broken_engine.mdl
runOnTick(1)
if(first()|dupefinished()){    
    
    #BRLight - brake light that activates once the brake is pressed
    #BCLight - backup light that activates if throttle is pressed and the gear is 1 (reverse)
    #Kttsh 2025 heheheheheh
    
    #Main settings
    
    TorqueCurve = array(90, 110, 135, 160, 180, 135, 125, 110, 95, 10) #The main torque curve.
    MaxRPM = 7000 #The max RPM that the engine can ever reach. The actual max RPM that can be reached at neutral is usually lower due to friction
    IdleRPM = 900
    MinRPM = 300 #The engine will stall if it falls lower than this
    
    FlyMass = 6.4 #Flywheel mass in kg.
    FlyRadius = 0.15 #Flywheel radius in meters
    Friction = 0.08 #Flywheel friction
    
    StarterTorque = 3 #Starter torque
    StarterCut = 800 #The RPM at which the starter will stop spinning
    
    #Revlimit settings
    
    RevLimiter = 1 #Enable rev-limiting. Mostly just for cool sounds, doesnt serve any serious purpose
    RevLimitM = 1000 #Revlimiter lower threshold
    RevLimitTo = 7000 #If the RPM is bigger than this the revlmiter will cut the fuel to the engine
    
    #Turbo settings
    
    TurboCharger = 1 #Enable turbocharger, can slightly boost the engine but it takes some time to spin up
    MaxBoost = 1.5  #Max boost multiplier
    TurboLag = 1 #Turbocharger spin-up time
    MaxTurboRPM = 200000 #Max turbo RPM
    
    #Transmission/Gearbox settings
    
    GearRatios = array(-3.63,0,3.63,2.1,1.5,1,0.8) #The gear table, note that N is the second gear in the array, R is the first.
    Differential = 3.7 #The differential that is multiplied by the gear
    Gear = 2 #The default gear on dupe finishing
    TransStiff = 0.75 #This makes the RPM smoother but limits the engine power
    BrakePower = 350 #The force that is applied to stop the car
    
    #Fuel consumption RPM settings
    
    FC_Idle = 450 
    FC_Min = 250   
    FC_Min_RPM = 3500
    
    FuelRem=30000
    
    Sound = "simulated_vehicles/4banger/4banger_idle.wav"
    MulSounds=1 #Uses 3 sounds instead of 1
    MT1 = 800
    MT2 = 2400
    MT3 = 4800 #Sound thresholds for different RPMS
    Sound2 = "simulated_vehicles/4banger/4banger_low.wav"
    Sound3 = "simulated_vehicles/4banger/4banger_mid.wav"
    S1Mul = 4
    S2Mul = 0.75
    S3Mul = 0.75 #Pitch muls for sounds
    
    StSound = ""
    TurboSound = "simulated_vehicles/turbo_spin.wav"
    BlowoffSound = "simulated_vehicles/turbo_blowoff.ogg"
    
    Loudness = 90 #DB for the loudest phase
    
    Broken=0
    
    Inertia = 0.5 * FlyMass * (FlyRadius ^ 2)
    CrTime=curtime()
}

function rpmInterp(RPM, Threshold1, Threshold2, Threshold3){
    local Value1 = 0
    local Value2 = 0 
    local Value3 = 0
    
    if(RPM <= Threshold1){
        Value1 = 1.0
        Value2 = 0.0
        Value3 = 0.0
    }elseif(RPM <= Threshold2){
        local Factor = (RPM - Threshold1) / (Threshold2 - Threshold1)
        Value1 = 1.0 - Factor
        Value2 = Factor
        Value3 = 0.0
    }elseif(RPM <= Threshold3){
        local Factor = (RPM - Threshold2) / (Threshold3 - Threshold2)
        Value1 = 0.0
        Value2 = 1.0 - Factor
        Value3 = Factor
    }else{
        Value1 = 0.0
        Value2 = 0.0
        Value3 = 1.0
    }
    
    return array(Value1,Value2,Value3)
}


if(changed(Ignition)&Ignition){
    if(MulSounds){
        soundPlay(1,0,Sound)
        soundLevel(1,Loudness-10)
        soundPlay(10,0,Sound2)
        soundLevel(10,Loudness-5)
        soundPlay(11,0,Sound3)
        soundLevel(11,85)
    }else{
        soundPlay(1,0,Sound)
        soundLevel(1,Loudness)
    }
}
if(changed(Ignition)&Ignition&TurboCharger){
    soundPlay(3,0,TurboSound)
}
if(changed(StarterActive)&StarterActive&RPM<StarterCut){
    soundPlay(2,0,StSound)
}
if(!StarterActive||RPM>StarterCut){
    soundStop(2)
}

if(changed(GearUp) & GearUp){
    if(Clutch|(random(0,100)>90|RPM<300)){   
        if(Gear < GearRatios:count()){
            Gear++
            soundPlay(5, 0, "buttons/lever7.wav")  
        }
    }else{
        soundPlay(5, 0, "Canister.ImpactHard")    
    }
}

if(changed(GearDown) & GearDown){
    if(Clutch|(random(0,100)>90|RPM<300)){    
        if(Gear > 1){
            Gear--
            soundPlay(5, 0, "buttons/lever7.wav")  
        }
    }else{
        soundPlay(5, 0, "Canister.ImpactHard")   
    }
}


function calc_FC(RPM, TF){
    local RPM_R = RPM / FC_Min_RPM
    local RPM_P = 1 + abs(RPM_R - 1) * 0.5
    if (TF < 0.8) {
        Load_penalty = 1 + (0.8 - TF) * 1.5
    }
    local CALCFC = FC_Min * RPM_P
    if (TF < 0.1) {
        CALCFC = max(CALCFC, FC_Idle)
    }
    return CALCFC
    
}


function array calc_torque(Throt, CurvePoints:array)
{
    if (RPM < MinRPM) {
        return array(0)
        soundPlay(5, 0, "vehicles/jetski/jetski_off.wav")
    }

    Idle_torque = 0
    if (RPM < IdleRPM) {
        Error = IdleRPM - RPM
        Idle_torque = max(0, Error * 0.15)
    }
    
    local TorqueC = 0
    RPM_Pr = RPM / MaxRPM
    
    if (RPM_Pr <= 0.1) {
        TorqueC = lerp(0, CurvePoints[1,number], RPM_Pr / 0.1)
    }
    elseif (RPM_Pr <= 0.2) {
        TorqueC = lerp(CurvePoints[1,number], CurvePoints[2,number], (RPM_Pr - 0.1) / 0.1)
    }
    elseif (RPM_Pr <= 0.3) {
        TorqueC = lerp(CurvePoints[2,number], CurvePoints[3,number], (RPM_Pr - 0.2) / 0.1)
    }
    elseif (RPM_Pr <= 0.4) {
        TorqueC = lerp(CurvePoints[3,number], CurvePoints[4,number], (RPM_Pr - 0.3) / 0.1)
    }
    elseif (RPM_Pr <= 0.5) {
        TorqueC = lerp(CurvePoints[4,number], CurvePoints[5,number], (RPM_Pr - 0.4) / 0.1)
    }
    elseif (RPM_Pr <= 0.6) {
        TorqueC = lerp(CurvePoints[5,number], CurvePoints[6,number], (RPM_Pr - 0.5) / 0.1)
    }
    elseif (RPM_Pr <= 0.7) {
        TorqueC = lerp(CurvePoints[6,number], CurvePoints[7,number], (RPM_Pr - 0.6) / 0.1)
    }
    elseif (RPM_Pr <= 0.8) {
        TorqueC = lerp(CurvePoints[7,number], CurvePoints[8,number], (RPM_Pr - 0.7) / 0.1)
    }
    elseif (RPM_Pr <= 0.9) {
        TorqueC = lerp(CurvePoints[8,number], CurvePoints[9,number], (RPM_Pr - 0.8) / 0.1)
    }
    else {
        TorqueC = lerp(CurvePoints[9,number], CurvePoints[10,number], (RPM_Pr - 0.9) / 0.1)
    }
     
    TF = Throt / 100.0
    FTORQUE = TorqueC * TF + Idle_torque
    Torque=FTORQUE
    local CSFC = calc_FC(RPM, TF)
    
    return array(FTORQUE, CSFC, TF)
}

function calc_turbo(Rpm, Throttle, Dt)
{
    local TTurboRPM = MaxTurboRPM * (Rpm / MaxRPM) * (Throttle / 100)
    local TurboAccel = (TTurboRPM - TurboRPM) / TurboLag
    TurboRPM = TurboRPM + TurboAccel * Dt

    local BoostPress = MaxBoost * (TurboRPM / MaxTurboRPM)

    local ThrottlePosition = Throttle / 100
        
    ManifoldPress = lerp(ManifoldPress, BoostPress * ThrottlePosition, 5 * Dt)

    local PressDiff = BoostPress - ManifoldPress
    
    if(PressDiff>0.25){
        soundPlay(6,0,BlowoffSound)
        soundVolume(6,(TurboRPM/150000)*0.8)
        TurboRPM = TurboRPM * (0.2 * Dt)
    }

    local BoostMul = 1.0 + (BoostPress * 0.3)
    BoostPress = BoostPress

    return BoostMul
}

function update(Dt){
    
    local EngineTorque = 0
    local CurFC = 0
    local CThrFac = 0
    local DT2 = 66.66/(1/Dt)

    if(!RevLimiter){
        if(Ignition&FuelRem>0&!Broken){
            local Earray = calc_torque(Throttle,TorqueCurve)
            EngineTorque = Earray[1,number]
            CurFC = Earray[2,number]
            CThrFac = Earray[3,number]
        }
    }else{
        if(RPM>RevLimitTo){
            RevLimit=1
        }
        if(RevLimit==1&RPM<RevLimitTo-RevLimitM){
            RevLimit=0
        }
        
        if(Ignition&!RevLimit&FuelRem>0&!Broken){
            local Earray = calc_torque(Throttle,TorqueCurve)
            EngineTorque = Earray[1,number]
            CurFC = Earray[2,number]
            CThrFac = Earray[3,number]
        }
    }
    if(TurboCharger){
        local BoostMul = calc_turbo(RPM, Throttle, Dt)
        EngineTorque = EngineTorque * BoostMul
        Torque = Torque * BoostMul
    }
        
    if(RPM>MaxRPM*1.4&!Broken){ Broken = 1 soundPlay(4,0,"weapons/explode4.wav") }
    if(changed(RevLimit)&RevLimit==1){
        soundPlay(4,0,"ambient/levels/streetwar/city_battle15.wav")
        soundPitch(4,255)
    }
    local FricTorque = Friction * AngVel
    local StartTorque = 0
        
    if(StarterActive & RPM < StarterCut){
        StartTorque = StarterTorque
    }
    
    local AngAccel = 0
    
    if(Wh1&Wh2){
        local BrakeTorque = -BrakePower * (Brake) * sign(Wh1AngVel) * DT2
        local BrakeTorque2 = -BrakePower * (Brake) * sign(Wh2AngVel) * DT2
        Wh1:applyTorque(BrakeTorque * vec(0,1,0)* 180 / pi())
        Wh2:applyTorque(-BrakeTorque2 * vec(0,1,0)* 180 / pi())
        Wh1AngVel = Wh1:angVel():pitch()*pi()/180
        Wh2AngVel = -Wh2:angVel():pitch()*pi()/180 
    }
    if(Brake>0.5){
        BRLight=1
    }else{
        BRLight=0
    }
    
    if(Throttle>10&Gear==1){
        BCLight=1
    }else{
        BCLight=0
    }
    
    local LoadTorque = 0
    if(Gear != 2){
        local CurRatio = GearRatios[Gear,number] * Differential
        local TransTorque = TransStiff * (AngVel - (Wh1AngVel * CurRatio))
        local TransTorque2 = TransStiff * (AngVel - (Wh2AngVel * CurRatio))

        LoadTorque = TransTorque + TransTorque2 / 2
        
        #print(_HUD_PRINTCENTER,Wh1AngVel + " \ " + Wh2AngVel + " \ " + AngVel/CurRatio)
        
        local WheelTorque = (LoadTorque + EngineTorque + StartTorque) * sign(CurRatio) * 180 / pi() * DT2 * (1-Clutch)
        local TotalTorque1 = WheelTorque 
        local TotalTorque2 = -WheelTorque
        
        Wh1:applyTorque(TotalTorque1 * vec(0,1,0))
        Wh2:applyTorque(TotalTorque2 * vec(0,1,0))
        
        AngAccel = ((EngineTorque + StartTorque - FricTorque)*Clutch + (-LoadTorque)*(1-Clutch) ) / Inertia
    }else{
        AngAccel = (EngineTorque + StartTorque - FricTorque) / Inertia
    }

    
        
    AngVel += AngAccel * Dt
      
    local CurPower = (EngineTorque * RPM) / 9549    
    local FuelFlow = CurPower * CurFC
    local FuelCons = (FuelFlow / 3600) * Dt
    FuelRem = FuelRem - FuelCons

        
    if(AngVel < 0){
        AngVel = 0
    } 
    
    RPM = AngVel * 9.55
}

local DT=curtime()-CrTime
CrTime=curtime()

update(DT)

RPM1=RPM
GearOut=Gear
Torque1=Torque
SoundPitch=(RPM1/10000)*255
SoundPitch2=(TurboRPM/150000)*100

if(soundPlaying(1)){
    
    if(MulSounds){
        local Vols = rpmInterp(RPM, MT1, MT2, MT3)
        soundPitch(1,SoundPitch*S1Mul)
        soundVolume(1,clamp(Throttle/100,0.5,1)*Vols[1,number])
        soundPitch(10,SoundPitch*S2Mul)
        soundVolume(10,clamp(Throttle/100,0.5,1)*Vols[2,number])
        soundPitch(11,SoundPitch*S3Mul)
        soundVolume(11,clamp(Throttle/100,0.5,1)*Vols[3,number])
    }else{
        soundPitch(1,SoundPitch)
        soundVolume(1,clamp(Throttle/100,0.5,1))
    }
}

if(soundPlaying(2)){
    soundPitch(2,SoundPitch*15)
}

if(soundPlaying(3)){
    soundPitch(3,SoundPitch2)
    soundVolume(3,SoundPitch2/100)
}

